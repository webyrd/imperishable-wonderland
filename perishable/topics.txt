# Major 'Arcs' (in the manga/anime sense)

The Most Beautiful Program Ever Written (extensions, including errors and angelic execution, delimited control/effect handlers, store-passing style, mutation, call-by-value vs. call-by-name vs. call-by-need s. call-by-push-value, etc.)
cool-relational-interpreter-examples
Fun, interesting, and thought-provoking examples of relational Scheme interpreters at work.
https://github.com/webyrd/cool-relational-interpreter-examples
Grab examples from Barliman repo, and from Clojure.conj talk with Greg in Austin
relational-interpreter-with-set-bang
Relational Scheme interpreter, written in miniKanren, with set!, and supporting different evaluation orders.
https://github.com/webyrd/relational-interpreter-with-set-bang
Error-handling relational interpreter:
https://github.com/webyrd/error-handling-relational-interpreter
ICFP 2017 and SW 2012 papers
PolyConf 2015 talk and workshop
Look at staged-mk examples
* Explore 3D code and quoted procedures in the relational interpreter

Explore the strange-looking behavior of shallow and deep embedding of the same language for mk-in-mk, and how combining both interpreters in one query sharing logic variables representing the same program can result in increased expressive power (deep embedding giving run* semantics rather than run 1 semantics), but with efficiency closer to that of the shallow embedding. (see my mk-in-mk experiments with these two interps--which repo is that in, again?)
What other behaviors in which we perform a conjunction of multiple interpreters for the same or similar languages, sharing fresh logic variables, seem interesting in a similar way, or which might shine light on this behavior?
* Dynamic vs. lexical scope interpreters in 2017 ICFP Pearl
* Generation of simple multi-language quines using relational interpreters for two Scheme-like languages. (https://github.com/webyrd/multi-quine)
Is this (or similar) behavior(s) seen in other contexts?

The challenges of conjunction
revisit cartesian-evalo: Cartesian product of multiple evalos
https://github.com/webyrd/cartesian-evalo

300 Orders of Magnitude or Bust! (Based on a CPP'24 talk showing Monte Carlo simulation + reinforcement learning applied to automated theorem proving finding a proof in a search tree with a branching factor of 10, at a depth of 300, equivalent to finding a solution in a search space of 10^300 (or so it is claimed).  I want the equivalent, or better, for search in miniKanren, for the relational Scheme interpreter and other relational programs.)

Build Your Own Barliman

A Course of Instruction in Programming Languages, Relational Style (interpreters, type checkers/inferencers, semantics, computability theory, proof checkers, automated theorem provers, compilers, etc., all explored from a relational point of view; think of ideas found in EoPL, TAPL, SICP, TLS, Sipser, Nilson and Nilson semantics book, <add your own programming languages textbook here>, relational style)


# Assorted topics (some of these may be promoted to Arcs, and moved above)

TODO go through Untitled Relational Interpreter Book outlines and LaTeX and readme
https://github.com/webyrd/untitled-relational-interpreter-book

TODO go through my 2014 Lambda Lounge Utah talk repo -- cKanren, finite automata and state machines, etc. https://github.com/webyrd/lambda-lounge-utah-mk-talk

TODO go through 2014 miniKanren-uncourse repo
https://github.com/webyrd/miniKanren-uncourse

TODO go through 2014 SL talk, inclusing `mathy-stuff.pdf` (https://github.com/webyrd/Strange-Loop-2014/blob/master/mathy-stuff.pdf) https://github.com/webyrd/Strange-Loop-2014.  I have more expansive equivalents to mathy stuff.  mathy stuff is also a good way to explain how to read judgements, how one might think about judgements, how to implement them in mk, etc.

TODO watch Clojure/conj talk with Nada Amin: From Greek to Clojure

TODO go through all my repos, as well

TODO look at mk Workshop papers

TODO look at draft papers, my private repos, TiddlyWiki, etc.  Some of this will have to be off-camera.

** MarkovJunior looks super cool.  I suspect there is a way to combine this with mk **
MarkovJunior is a probabilistic programming language where programs are combinations of rewrite rules and inference is performed via constraint propagation. MarkovJunior is named after mathematician Andrey Andreyevich Markov, who defined and studied what is now called Markov algorithms. https://github.com/mxgmn/MarkovJunior

Logic programming approaches of different expressive power, and with different semantics (especially regarding negation), termination guarantees, and complexity classes.  Explore the mk equivalents as well.
* Prolog
* Datalog
* Answer Set Programming

negation and all that
* negation as failure
* the Clark completion (spelling?)
* conda and condu
* the g-rule
* the problems
* stratified negation
* ASP notion of negation and stable model semantics
* explicit encoding of constructive negation by writing a `not-<fooo>` relation as a counterpoint to your "positive" `fooo` relation
* encoding negative information through the relational Scheme interpreter: failure to pattern match, `not` as a Scheme predicate, etc.  What is the power, expressiveness, complexity, etc.?  To what extent can staging the interpreter and other techniques reduce the overhead?

different ways to go from Scheme to miniKanren:
* hand-transformation
* compile
* Scheme interpeter in mk

different ways to implement miniKanren:
* abstract machine
* deep embedding
* shallow embedding
* interpreter
* compiler
* FPGA
* ASIC

macros and miniKanren:
* a basic intro to Scheme macros
* macros in context, including how to use macros effectively:
** how the macros in miniKanren work
** alternative interfaces to miniKanren
*** `defrel`
*** alternative `run` interfaces
** writing various test macros

how to debug miniKanren programs
* causes of divergence
* causes of failure
* causes of unexpected behavior
* standard 'gotchas'
* `run 1` vs. `run *`
* running a relation with all variables fresh

program transformations, from a relational perspective:
* transformations of relational programs
* transformations implemented relationally

What makes a program relational?  What does that mean?  How can you tell if a program is relational?

How to translate a Prolog program to miniKanren.  How to deal with the nasty bits of Prolog that aren't relational

How to deal with the nasty bits of a Scheme program you want to translate to miniKanren

How to take an academic CS/PL paper and translate the rules to miniKanren, and play with those rules

how to deal with scope and binding: environments, De Bruijn, locally nameless, combinatory logic, nominal unification/equivariant unification, HOAS, nominal sets, etc.

How to get mk to not just generate similar "boring" answers when performing synthesis (lots of ways to attempt this)

standard synthesis techniques + trying to apply them to mk synthesis (for example, canonical versions of expressions, per-hole type or grammar restrictions, etc.

trace how Kanren and miniKanren have changed over time, along with other miniKanren-like languages, such as core.logic and OCanren.  Document the languages.  Look at the implementations.

revisit https://github.com/webyrd/declarative-semantics
miniKanren prototype of version v2 of 'Declarative semantics for functional languages: compositional, extensional, and elementary' by Jeremy Siek.

revisit meta-circular-interp-in-mk: Simple Scheme interpreter, running inside a relational Scheme interpreter written in miniKanren, running inside of Scheme. It's...a little slow.
https://github.com/webyrd/meta-circular-interp-in-mk
Good candidate (and test case) for staged evaluation!

look closely at utah-minikanren-summer-school, especially Jason's (and Dan's?) mk-convert.pdf (https://github.com/webyrd/utah-minikanren-summer-school/blob/master/mk-convert.pdf)
https://github.com/webyrd/utah-minikanren-summer-school

relational macro expander:
* fexprs
* hygienic Scheme macros

revisit mk-interpreter-with-term-size: miniKanren relational interpreter with term size argument
https://github.com/webyrd/mk-interpreter-with-term-size
also look closely at Petr Lozov's work, which is much more sophisticated

revisit Igor Wiedler's relational Turing Machine, ported from core.logic to miniKanren.
https://github.com/webyrd/igors-turing-machine

revisit mad-at-x miniKanren/cKanren take on adatx (Automatic Design of Algorithms Through X) main example (at https://github.com/LudoTheHUN/adatx)
https://github.com/webyrd/mad-at-x
CLP(SMT) candidate

environment trimming; memory management for logic programming

McCarthy's `amb`

Take a look at ElephantKanren again.  Anything here of interest?
https://github.com/webyrd/elephantKanren

even vs. odd streams
streams vs. 2-continuation (sk & fk) model of backtracking
old skool mk based on sk & fk

AM & Eurisko
Programmer's Apprentice
BAT

mediKanren and dbKanren

reading and implementing judgements

propositional calculus
predicate calculus
monadic second-order logic
higher-order logic
higher-order unification
HH Formula, and in Lambda Prolog
implication and negation in Lambda Prolog

eigen variables
universal vs. existential quantification
nominal logic and quantification

parsing
* with derivatives
* PEG
* packrat
* DCG + tabling (and equivalence to packrat parsing)
* LALR
* parser combinators

fixed point semantics
stable model semantics

denotational semantics
operational semantics
axiomatic semantics

equational reasoning

laziness

function-logic programming

generators
Icon

constructive logic
intuitionistic logic
classical logic

mechanized meta-theory

heap/stack/registers

probKanren -- trace evolution of versions 1, 2, and 3
current approach and goals and challenges

wreckto-verseo Verse Calculus in miniKanren

Icon in miniKanren

revisit relational sorting
https://github.com/webyrd/relational-sorting

look at Jetisu (Jetisu is a toolset for modelling with sigma complete relations; Doing for computation and business rules what the relational model did for data https://github.com/DavidPratten/jetisu)

backjumping
CDCL
two-watched literal scheme
unit propagation
underconstraints
SAT -- look at MB's mkcdcl (miniKanren with conflict-driven clause learning using a SAT solver) https://github.com/michaelballantyne/mkcdcl
SMT
solver-oriented programming

presento vs. absento
tree automata

Robinson and unification
the resolution method

unification and lattices; Plotkin and Reynolds papers
finding fixpoints over lattices
lattice-oriented programming
LVars and LVish
abstract interpretation, datalog, etc.

segment variables and pattern matching/unification

matche

duals of unification

anti-unification

CLP(Tree)
=/=
absento
type constraints

typed miniKanren

look at Clever Algorithms: Nature-Inspired Programming Recipes, from the viewpoint of mk and relational programming https://github.com/clever-algorithms/CleverAlgorithms

raytracing/raycasting/etc, viewed relationally
https://github.com/webyrd/simple-raytracer/blob/master/raytracer.rkt
I know there are some interesting new algorithms that can do inference

look at Holmes (Holmes is a library for computing constraint-solving problems. Under the hood, it uses propagator networks and conflict-directed clause learning to optimise the search over the parameter space.
https://github.com/i-am-tom/holmes)

look at diff-SAT: Probabilistic Answer Set Programming and Probabilistic SAT Solving (https://github.com/MatthiasNickles/diff-SAT)

look at https://github.com/ImparaAI/monte-carlo-tree-search

look at Differential Dataflow (An implementation of differential dataflow over timely dataflow on Rust. https://github.com/TimelyDataflow/differential-dataflow)

look at Guanxi again: https://github.com/ekmett/guanxi

look at https://github.com/bboskin/syllogistic-provers
syllogistic-provers:
These are some syllogistic provers I made over the summer of 2017.
Inspired by Larry Moss's M482 course in Mathematical Logic, and Dan Friedman's C311 course in Programming Language Principles, I used miniKanren to make provers for some basic logical systems covered in Moss's class.
The miniKanren language is used courtesy of Dan Friedman, William E. Byrd, and Oleg Kiselyov http://minikanren.org/

correctness-preserving program transformations
(see https://github.com/namin/lambdajam)
representation independence
defunctionalization
CPS
trampolining
registerization

WiljaEdit relational transformation-based structured editor

first-order miniKanren

Fizzbuzz, relational style

Metamagical Themas: Lisp, self-reps, quines, and viruses -- miniKanren style
self-rep explorations with Nada Amin -- try to push further
self-modifying relational interpeter?

reflective tower of relational interpreters, in which one level can reach up and modify a level interpreting it

miniKanren quines -- mk `run` expressions that generate themselves -- try to generate using mk-in-mk (Michael Ballantyne has constructed these by hand)

meta-miniKanren
https://github.com/michaelballantyne/meta-minikanren
metaKanren

visualizing the search space

revisit CDG repos and experiments
https://github.com/orgs/cdglabs/repositories

revisit miniKanren Playground
https://github.com/webyrd/minikanren-playground

revisit relational-reactive-programming
https://github.com/webyrd/relational-reactive-programming

revisit Polyconf 2015 code, especially wrt angelic execution
https://github.com/webyrd/polyconf-2015

dependent types in miniKanren
Idris/miniKanren Love Child
https://github.com/webyrd/curnelo

modes
impure mk: project, conda, condu, copy_term, etc.

purity in Prolog -- more than just avoiding cut

various flavors of cut in Prolog: all the colors and mixes of colors; "soft-cut"; committed-choice non-determinism; Mercury; Oleg's explanation of what inspired `conda` vs `condu` in framenotes of TRS

true meta-circular Scheme interp
true meta-circular mk interp

mixing Scheme and mk code *relationally* through implementing Scheme and mk interpreters relationally in miniKanren: should be able to handle relationally (for example, perform synthesis) over mixtures of Scheme and mk as seen in TRS1, for example

handling fully relationally higher-order miniKanren relations such as `mapo`, through mk-in-mk

microKanren in Scheme in mk in Scheme to get relational behavior -- collapse/stage that!

can we synthesize a radiation-hardened quine?

combinatory logic in mk
synthesizing fixed point combinators
* the different approaches I've tried

Quines, twines, thrines
absento trick for twines
Quine relay
self-reps
Kleene's Recursion theorems
Omega and Y and U combinators
Omega as small-step Quine

vicious circles
non-well-founded set theory
coinductive logic programming, tabling, streams, etc.
rational infinite trees, Prolog II, etc.

tabled logic programming and abstract interpretation

top-down vs. bottom-up evaluation

bi-directional search

magic sets

focused proof search

mk as theorem prover
reifying the proof tree
LeanTAP
LeanCOP
Matt's simple proof checker and the 2017 ICFP pearl

Fun with GEB
GEB MIU interpreter -- I think I have a GitHub repo on this, with a U of Utah student -- undecidability

relational automata -- tabling, e-graphs, VSA, etc. -- try to recapture decidability and the ideal complexity classes, when the problems are deciadable (or in a mode in which everything should be decidable)

revisit Oleg's proofs in the purely relational arithmetic FLOPS paper; alternative representation of these numerals; tree constraints, e-graphs, etc.  sharing, tabling, etc.?  Hilbert's 10th problem

Hindley-Milner type inference; `let` polymorphism -- how best to represent?  complexity classes; principal typing; have we ever solved these issues satisfactorily?
https://github.com/webyrd/hindley-milner-type-inferencer

Oleg's higher-order relation fixed point trick for relational type inferencer

revisit mult-quines
https://github.com/webyrd/multi-quine

non-monotonic logics

temporal logics

Ivan Bratko book

abductive reasoning

inductive logic programming

synthesis using relational interpreter and the complexity of program traces (vs. length of the code); a short Scheme program might require more computation than a longer program, if the shorter program has a longer trace to reach success (due to the use of a recursive helper, for example); `reverse` using `append` is hard for Barliman to find, if I remember correctly

Barliman optimizations

look at the screenshots of Barliman examples; also, the Clojure/conj talk I gave with Greg in Austin

n-grams for synthesis

termination analysis of mk relations, based on decreasing measure on argument terms -- Petr Lozov's dissertation work

interesting SW and mk Workshop papers

type systems and termination
occurs check and self-application and termination

the issue with small-step, multi-pass compilers, etc. -- "breaking the wires"
fail fast

N ways to perform arithemetic relationally
* Oleg arithmetic
* Peano
* CLP(FD)
* CLP(Z)
* CLP(SMT)
* delayed goals

revisit A Relational Exploration of the Chomsky Hierarchy (SL 2013 with Dan)
https://www.infoq.com/presentations/chomsky-hierarchy/
https://github.com/webyrd/strange-loop-2013
Some cool code here!  Like HO PDA

revisit TAPL in mk/core.logic/etc
https://github.com/webyrd/TAPL-in-miniKanren-cKanren-core.logic

revisit MU-problem: Hofstadter's MU problem (http://en.wikipedia.org/wiki/MU_puzzle) in miniKanren. Straight-forward implementation based on the appendo relation.
https://github.com/webyrd/MU-puzzle
would CLP(Set) help? staging?

revisit set-constraints: Stolzenburg-style set constraints for miniKanren
https://github.com/webyrd/set-constraints
how does this compare with Nada's and Claire's work on set constraints in mk?

revisit pcpo
Post Correspondence Problem (PCP) in miniKanren
Written with Tony Tuttle.
https://github.com/webyrd/pcpo

relational interpretation of copy_term??
Joe Near's encoding in alphaLeanTAP

tree automata
e-graphs
version space algebras

program synthesis -- try implementing various synthesis algorithms

search
* Oleg search
* DFS/BFS/IDDFS
* A*
* neural-guided search
* MCTS
* MC simulation + RL
* minimize KL-divergence

bidirectional computing

reversible computing
RFun: A reversible functional programming language
https://github.com/webyrd/rfun-interp

deep encoding + shallow encoding of mk-in-mk: combine to get run* expressiveness with performance closer to that of shallow embeddings

abstracting abstract machines

tabling
https://github.com/webyrd/tabling

miniKanren interpreter in Scheme
https://github.com/webyrd/mk-interp

revisit techniques and programs in Advanced miniKanren Hangouts
https://github.com/webyrd/miniKanren-hangout-summaries

implementing different logics
defeasible logic
linear logic
linear logic multiset rewriting
modal logic

interactive fiction and storytelling

combining parser, type checker/inferencer, and interpeter -- deal with the conjunction problem

the problems in miniKanren and general-purpose relational programming
* conjunction
* negation
* general-purpose vs. specialized constraints
* composing constraints

LeanTAP and other ATPsx

case studies in making programs relational, and exploring the resulting relations

case studies in making miniKanren programs fast

porting miniKanren to other languages and runtimes

understanding and hacking the implementation of `faster-miniKanren`

a taxonomy of miniKanren-related languages

revisiting Kanren

revisiting `mirror` and the old skool Kanren examples

annotated bibliography of miniKanren-related literature

Fifth Generation Computing Project

Archaelogy into old logic and relational languages

alternate tech for building mk:
* ferns
* propagators
* Warren Abstract Machine

Prolog/Datalog/ASP
Lambda Prolog
Godel
Escher
Verse
Mercury
etc.

concatenative programming
cato
Concatenative relational interpreter in miniKanren
https://github.com/webyrd/cato

constraint logic programming

Constraint Handling Rules

concurrent prolog

Larry Moss's 1# register language, relational style

normalization-by-evaluation, relational style

relational implementation of FORTH

mutually-recursive relational languages

the equivalent of Chris Okasaki's 'Purely Functional Data Structures', but for relational programming

difference lists
set constraints
unification over records

Chomsky hierarchy

angelic execution

exceptions
control effects
effect handlers
delimited continuations

fuzzing

program synthesis
property-based program synthesis

towers of interpreters
mk in mk
quasiquote quines in Scheme in Scheme in mk in Scheme, and staging to remove overhead
heterogenous towers
collapsing towers

staged evaluation
partial deduction
super compilation (and the relational equivalent: conjunctive partial deduction (is this correct?))

extended Andorra model and conjunction

should `run*` use DFS?
